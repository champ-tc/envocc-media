generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model requisition {
  id                  Int                   @id @default(autoincrement())
  requisition_name    String
  unit                String
  type_id             Int
  quantity            Int
  reserved_quantity   Int?
  is_borro_restricted Boolean
  description         String?
  createdAt           DateTime              @default(now())
  requisition_images  String
  status              Int                   @default(1)
  order               order[]
  type                Type                  @relation(fields: [type_id], references: [id], map: "Requisition_type_id_fkey")
  logs                RequisitionLog[]
  updates             requisition_updates[]

  @@index([type_id], map: "Requisition_type_id_fkey")
}

model requisition_updates {
  id            Int         @id @default(autoincrement())
  requisitionId Int
  addedQuantity Int
  updateType    String
  updatedAt     DateTime    @default(now())
  remarks       String?
  requisition   requisition @relation(fields: [requisitionId], references: [id])

  @@index([requisitionId], map: "requisition_updates_requisitionId_fkey")
}

model Borrow {
  id                  Int              @id @default(autoincrement())
  borrow_name         String
  unit                String
  type_id             Int
  quantity            Int
  is_borro_restricted Boolean
  description         String?
  createdAt           DateTime         @default(now())
  borrow_images       String
  status              Int              @default(1)
  type                Type             @relation(fields: [type_id], references: [id])
  logs                BorrowLog[]
  updates             Borrow_updates[]
  order               order[]

  @@index([type_id], map: "borrow_type_id_fkey")
  @@map("borrow")
}

model Borrow_updates {
  id              Int      @id @default(autoincrement())
  borrowId        Int
  updatedQuantity Int
  updateType      String
  remarks         String?
  createdAt       DateTime @default(now())
  borrow          Borrow   @relation(fields: [borrowId], references: [id])

  @@index([borrowId], map: "borrow_updates_borrowId_fkey")
  @@map("borrow_updates")
}

model image {
  id        Int      @id @default(autoincrement())
  title     String
  filename  String   @unique(map: "Image_filename_key")
  addedDate DateTime @default(now())
  viewCount Int      @default(0)
}

model order {
  id               Int          @id @default(autoincrement())
  userId           Int
  requisitionId    Int?
  borrowId         Int?
  requisition_type Int
  quantity         Int
  date             DateTime     @default(now())
  borrow           Borrow?      @relation(fields: [borrowId], references: [id], map: "Order_borrowId_fkey")
  requisition      requisition? @relation(fields: [requisitionId], references: [id], map: "Order_requisitionId_fkey")

  @@index([borrowId], map: "Order_borrowId_fkey")
  @@index([requisitionId], map: "Order_requisitionId_fkey")
}

model Reason {
  id              Int              @id @default(autoincrement())
  reason_name     String           @unique
  borrowLogs      BorrowLog[]      @relation("BorrowUsageReason")
  requisitionLogs RequisitionLog[] @relation("RequisitionUsageReason")

  @@map("reason")
}

model RequisitionLog {
  id                      Int         @id @default(autoincrement())
  requisition_id          Int
  user_id                 Int
  requested_quantity      Int
  approved_quantity       Int?
  stock_after_requisition Int?
  requisition_date        DateTime    @default(now())
  approved_by_admin_id    Int?
  createdAt               DateTime    @default(now())
  status                  String
  requested_groupid       String
  delivery_address        String?
  delivery_method         String
  usageReason             Int
  customUsageReason       String?
  approvedByAdmin         user?       @relation("AdminRequisitionApproval", fields: [approved_by_admin_id], references: [id])
  requisition             requisition @relation(fields: [requisition_id], references: [id])
  reason                  Reason      @relation("RequisitionUsageReason", fields: [usageReason], references: [id])
  user                    user        @relation(fields: [user_id], references: [id])

  @@index([approved_by_admin_id], map: "requisition_log_approved_by_admin_id_fkey")
  @@index([requisition_id], map: "requisition_log_requisition_id_fkey")
  @@index([user_id], map: "requisition_log_user_id_fkey")
  @@index([usageReason], map: "requisition_log_usageReason_fkey")
  @@map("requisition_log")
}

model BorrowLog {
  id                   Int       @id @default(autoincrement())
  borrow_id            Int
  user_id              Int
  quantity             Int
  returned_quantity    Int?
  borrow_date          DateTime  @default(now())
  return_due_date      DateTime
  actual_return_date   DateTime?
  delivery_method      String    @default("self")
  delivery_address     String?
  borrow_groupid       String
  approved_quantity    Int?
  approved_by_admin_id Int?
  createdAt            DateTime  @default(now())
  status               String    @default("pending")
  usageReason          Int
  customUsageReason    String?
  approvedByAdmin      user?     @relation("AdminBorrowApproval", fields: [approved_by_admin_id], references: [id])
  borrow               Borrow    @relation(fields: [borrow_id], references: [id])
  reason               Reason    @relation("BorrowUsageReason", fields: [usageReason], references: [id])
  user                 user      @relation(fields: [user_id], references: [id])

  @@index([approved_by_admin_id], map: "borrow_log_approved_by_admin_id_fkey")
  @@index([borrow_id], map: "borrow_log_borrow_id_fkey")
  @@index([user_id], map: "borrow_log_user_id_fkey")
  @@index([usageReason], map: "borrow_log_usageReason_fkey")
  @@map("borrow_log")
}

model Type {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  borrows     Borrow[]
  requisition requisition[]

  @@map("types")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  user_id   Int
  token     String   @unique
  createdAt DateTime @default(now())
  user      user     @relation(fields: [user_id], references: [id])

  @@index([createdAt])
  @@index([user_id], map: "passwordresettoken_user_id_fkey")
  @@map("passwordresettoken")
}

model user {
  id                   Int                  @id @default(autoincrement())
  username             String               @unique(map: "User_username_key")
  password             String
  title                String
  firstName            String
  lastName             String
  tel                  String
  email                String               @unique(map: "User_email_key")
  department           String
  position             String?
  role                 String               @default("user")
  createdAt            DateTime             @default(now())
  approvedBorrows      BorrowLog[]          @relation("AdminBorrowApproval")
  borrowLogs           BorrowLog[]
  PasswordResetToken   PasswordResetToken[]
  approvedRequisitions RequisitionLog[]     @relation("AdminRequisitionApproval")
  requisitions         RequisitionLog[]
}
