// lib/protectApi.ts

import { getToken } from 'next-auth/jwt';
import { NextResponse, type NextRequest } from 'next/server';

// üß† In-memory store ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô request ‡∏ï‡πà‡∏≠ IP
const ipRateLimitMap = new Map<string, { count: number; timestamp: number }>();

function isRateLimited(ip: string, limit: number, windowMs: number): boolean {
    const now = Date.now();
    const entry = ipRateLimitMap.get(ip);

    if (!entry) {
        ipRateLimitMap.set(ip, { count: 1, timestamp: now });
        return false;
    }

    if (now - entry.timestamp > windowMs) {
        ipRateLimitMap.set(ip, { count: 1, timestamp: now });
        return false;
    }

    if (entry.count >= limit) {
        return true;
    }

    entry.count += 1;
    return false;
}

/**
 * ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô API ‡∏î‡πâ‡∏ß‡∏¢: 1) ‡∏ï‡∏£‡∏ß‡∏à JWT 2) ‡πÄ‡∏ä‡πá‡∏Ñ role 3) ‡πÄ‡∏ä‡πá‡∏Ñ rate limit
 * 
 * @param request NextRequest
 * @param allowedRoles ['admin'], ['user'], ['admin', 'user'] ‡∏Ø‡∏•‡∏Ø
 * @param limit ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô request ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (default: 30)
 * @param windowMs ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (ms) ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö limit (default: 60000 ms = 1 ‡∏ô‡∏≤‡∏ó‡∏µ)
 * @returns true (‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô), ‡∏´‡∏£‡∏∑‡∏≠ NextResponse 403 / 429
 */
export async function protectApiRoute(
    request: NextRequest,
    allowedRoles: string[],
    limit = 30,
    windowMs = 60_000
): Promise<true | NextResponse> {
    const ip = request.headers.get('x-forwarded-for') || 'unknown-ip';

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à rate limit
    if (isRateLimited(ip, limit, windowMs)) {
        return NextResponse.json({ error: 'Too many requests' }, { status: 429 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à JWT + role
    const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });
    if (!token || !allowedRoles.includes(token.role as string)) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 403 });
    }

    return true;
}
